// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bkp27JqRmBswsckuZzB2bS
// Component: OrQ2dPZbDYtD
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts,
  ensureGlobalVariants,
  hasVariant,
  useDollarState
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import { usePlasmicDataOp } from "@plasmicapp/react-web/lib/data-sources";
import AppLayout from "../../AppLayout"; // plasmic-import: bqTYCQhIX3z3/component
import { LiveDashboardFilters } from "../../../../components/LiveDashboardFilters"; // plasmic-import: 6pG6BmIftLqL/codeComponent
import { KpiCard } from "../../../../components/KpiCard"; // plasmic-import: _nmel_jB4ZbX/codeComponent
import Card from "../../Card"; // plasmic-import: cRQT4x8sYalu/component
import { PieChartOnly } from "../../../../components/PieChartOnly"; // plasmic-import: v0bADAbM9ckh/codeComponent
import { OfferCard } from "../../../../components/OfferCard"; // plasmic-import: 1zRp6mylhFEz/codeComponent
import { useScreenVariants as useScreenVariantsf2BxFpzIBjxi } from "./PlasmicGlobalVariant__Screen"; // plasmic-import: f2BxFpzIBjxi/globalVariant
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bkp27JqRmBswsckuZzB2bS/projectcss
import sty from "./PlasmicLiveDashboard.module.css"; // plasmic-import: OrQ2dPZbDYtD/css

createPlasmicElementProxy;

export const PlasmicLiveDashboard__VariantProps = new Array();

export const PlasmicLiveDashboard__ArgProps = new Array();

const $$ = {};

function PlasmicLiveDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  let [$queries, setDollarQueries] = React.useState({});
  const stateSpecs = React.useMemo(
    () => [
      {
        path: "sidebarOpen",
        type: "private",
        variableType: "boolean",
        initFunc: ({ $props, $state, $queries, $ctx }) => true
      }
    ],

    [$props, $ctx, $refs]
  );
  const $state = useDollarState(stateSpecs, {
    $props,
    $ctx,
    $queries: $queries,
    $refs
  });
  const new$Queries = {
    fetchData: usePlasmicDataOp(() => {
      return {
        sourceId: "xtYAr44d1ijaJDfNC5GTM7",
        opId: "0e2563e6-c563-44e9-b610-e2771f3e6bc8",
        userArgs: {},
        cacheKey: `plasmic.$.0e2563e6-c563-44e9-b610-e2771f3e6bc8.$.`,
        invalidatedKeys: null,
        roleId: null
      };
    })
  };
  if (Object.keys(new$Queries).some(k => new$Queries[k] !== $queries[k])) {
    setDollarQueries(new$Queries);
    $queries = new$Queries;
  }
  const globalVariants = ensureGlobalVariants({
    screen: useScreenVariantsf2BxFpzIBjxi()
  });
  return (
    <React.Fragment>
      <div className={projectcss.plasmic_page_wrapper}>
        <div
          data-plasmic-name={"root"}
          data-plasmic-override={overrides.root}
          data-plasmic-root={true}
          data-plasmic-for-node={forNode}
          className={classNames(
            projectcss.all,
            projectcss.root_reset,
            projectcss.plasmic_default_styles,
            projectcss.plasmic_mixins,
            projectcss.plasmic_tokens,
            plasmic_antd_5_hostless_css.plasmic_tokens,
            sty.root
          )}
        >
          <AppLayout
            data-plasmic-name={"appLayout"}
            data-plasmic-override={overrides.appLayout}
            className={classNames("__wab_instance", sty.appLayout)}
          >
            <div className={classNames(projectcss.all, sty.freeBox__pssZu)}>
              <LiveDashboardFilters
                data-plasmic-name={"liveDashboardFilters"}
                data-plasmic-override={overrides.liveDashboardFilters}
                buttonText={"Apply Filters"}
                className={
                  "" +
                  " " +
                  classNames("__wab_instance", sty.liveDashboardFilters)
                }
                filterOptions={{
                  months: ["2024", "2025"],
                  teams: [
                    "Aura & Proxima Chennai",
                    "Aura & Proxima Coimbatore",
                    "Aura & Proxima Karnataka",
                    "Aura & Proxima Kerala",
                    "CND Chennai"
                  ],

                  hq: ["Allahabad", "Allepey", "Alwar", "Anantapur", "Azamgarh"]
                }}
              />

              <div className={classNames(projectcss.all, sty.freeBox__ugAzO)}>
                <div className={classNames(projectcss.all, sty.freeBox__fEvt)}>
                  <KpiCard
                    className={classNames("__wab_instance", sty.kpiCard__m7XA)}
                    color={"red"}
                    query={(() => {
                      try {
                        return $queries.fetchData.data[0].totalServiceAmount;
                      } catch (e) {
                        if (
                          e instanceof TypeError ||
                          e?.plasmicType === "PlasmicUndefinedDataError"
                        ) {
                          return { uid: 3013489, text: ["0"] };
                        }
                        throw e;
                      }
                    })()}
                    title={"Total Primary Sales"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__hbwGg)}>
                  <KpiCard
                    className={classNames("__wab_instance", sty.kpiCard__lEcgu)}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__pqOqS)}>
                  <KpiCard
                    className={classNames(
                      "__wab_instance",
                      sty.kpiCard___3YkDz
                    )}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__gqCw5)}>
                  <KpiCard
                    className={classNames("__wab_instance", sty.kpiCard__ifKhu)}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__fB8Oe)}>
                  <KpiCard
                    className={classNames("__wab_instance", sty.kpiCard__febfw)}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__f8Ra)}>
                  <KpiCard
                    className={classNames(
                      "__wab_instance",
                      sty.kpiCard___2AMyA
                    )}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__qxck2)}>
                  <KpiCard
                    className={classNames("__wab_instance", sty.kpiCard__eVzP8)}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
                <div
                  className={classNames(projectcss.all, sty.freeBox___8FHTk)}
                >
                  <KpiCard
                    className={classNames(
                      "__wab_instance",
                      sty.kpiCard___6Q8Cd
                    )}
                    color={"red"}
                    query={{ totalServiceAmount: 0 }}
                    title={"Metric Name"}
                  />
                </div>
              </div>
              <Card
                data-plasmic-name={"card"}
                data-plasmic-override={overrides.card}
                className={classNames("__wab_instance", sty.card)}
              >
                <PieChartOnly
                  data-plasmic-name={"pieChartOnly"}
                  data-plasmic-override={overrides.pieChartOnly}
                  className={classNames("__wab_instance", sty.pieChartOnly)}
                  data={[
                    { name: "2000-5000", value: 3491, color: "#e74c3c" },
                    { name: "5001-15000", value: 2630, color: "#3498db" },
                    { name: "15001-50000", value: 1035, color: "#2c3e50" },
                    { name: ">50000", value: 191, color: "#f1c40f" }
                  ]}
                  height={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? 110
                      : 280
                  }
                  innerRadius={50}
                  outerRadius={80}
                  width={
                    hasVariant(globalVariants, "screen", "mobileOnly")
                      ? 480
                      : 500
                  }
                />
              </Card>
              <div className={classNames(projectcss.all, sty.freeBox__aWxX4)}>
                <div className={classNames(projectcss.all, sty.freeBox__qgdB5)}>
                  <OfferCard
                    className={classNames(
                      "__wab_instance",
                      sty.offerCard__z989V
                    )}
                    color={"#e74c3c"}
                    title={"claims"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__zpyym)}>
                  <OfferCard
                    className={classNames(
                      "__wab_instance",
                      sty.offerCard___8Mzsj
                    )}
                    color={"#e74c3c"}
                    title={"Invoice"}
                  />
                </div>
                <div className={classNames(projectcss.all, sty.freeBox__vq7Me)}>
                  <OfferCard
                    className={classNames(
                      "__wab_instance",
                      sty.offerCard__eUghw
                    )}
                    color={"#e74c3c"}
                    title={
                      hasVariant(globalVariants, "screen", "mobileOnly")
                        ? "Rate Difference"
                        : "Rate Difference"
                    }
                  />
                </div>
              </div>
              <div
                data-plasmic-name={"text"}
                data-plasmic-override={overrides.text}
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text
                )}
              >
                {"Total Offers"}
              </div>
            </div>
          </AppLayout>
        </div>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "appLayout",
    "liveDashboardFilters",
    "card",
    "pieChartOnly",
    "text"
  ],

  appLayout: [
    "appLayout",
    "liveDashboardFilters",
    "card",
    "pieChartOnly",
    "text"
  ],

  liveDashboardFilters: ["liveDashboardFilters"],
  card: ["card", "pieChartOnly"],
  pieChartOnly: ["pieChartOnly"],
  text: ["text"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicLiveDashboard__ArgProps,
          internalVariantPropNames: PlasmicLiveDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicLiveDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicLiveDashboard";
  } else {
    func.displayName = `PlasmicLiveDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicLiveDashboard = Object.assign(
  // Top-level PlasmicLiveDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appLayout: makeNodeComponent("appLayout"),
    liveDashboardFilters: makeNodeComponent("liveDashboardFilters"),
    card: makeNodeComponent("card"),
    pieChartOnly: makeNodeComponent("pieChartOnly"),
    text: makeNodeComponent("text"),
    // Metadata about props expected for PlasmicLiveDashboard
    internalVariantProps: PlasmicLiveDashboard__VariantProps,
    internalArgProps: PlasmicLiveDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicLiveDashboard;
/* prettier-ignore-end */
