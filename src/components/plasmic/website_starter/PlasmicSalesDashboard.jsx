// @ts-nocheck
/* eslint-disable */
/* tslint:disable */
/* prettier-ignore-start */
/** @jsxRuntime classic */
/** @jsx createPlasmicElementProxy */
/** @jsxFrag React.Fragment */
// This class is auto-generated by Plasmic; please do not edit!
// Plasmic Project: bkp27JqRmBswsckuZzB2bS
// Component: SLmuKUI50k0I
import * as React from "react";
import {
  classNames,
  createPlasmicElementProxy,
  deriveRenderOpts
} from "@plasmicapp/react-web";
import { useDataEnv } from "@plasmicapp/react-web/lib/host";
import AppLayout from "../../AppLayout"; // plasmic-import: bqTYCQhIX3z3/component
import { SalesDashboardFilters } from "../../../../components/SalesDashboardFilters"; // plasmic-import: xM0Jkby-mRar/codeComponent
import { SalesChart } from "../../../../components/SalesChart"; // plasmic-import: T7PswSso4hMG/codeComponent
import { ItemSalesTable } from "../../../../components/ItemSalesTable"; // plasmic-import: 2E1jD1SqFDlT/codeComponent
import { HQSalesTable } from "../../../../components/HQSalesTable"; // plasmic-import: 705yNOpxqjDM/codeComponent
import { SalesTeamTable } from "../../../../components/SalesTeamTable"; // plasmic-import: n8oaDnrCaPD2/codeComponent
import { CustomerSalesTable } from "../../../../components/CustomerSalesTable"; // plasmic-import: KoRtNQ4HR-7y/codeComponent
import "@plasmicapp/react-web/lib/plasmic.css";
import plasmic_antd_5_hostless_css from "../antd_5_hostless/plasmic.module.css"; // plasmic-import: ohDidvG9XsCeFumugENU3J/projectcss
import projectcss from "./plasmic.module.css"; // plasmic-import: bkp27JqRmBswsckuZzB2bS/projectcss
import sty from "./PlasmicSalesDashboard.module.css"; // plasmic-import: SLmuKUI50k0I/css

createPlasmicElementProxy;

export const PlasmicSalesDashboard__VariantProps = new Array();

export const PlasmicSalesDashboard__ArgProps = new Array();

const $$ = {};

function PlasmicSalesDashboard__RenderFunc(props) {
  const { variants, overrides, forNode } = props;
  const args = React.useMemo(
    () =>
      Object.assign(
        {},
        Object.fromEntries(
          Object.entries(props.args).filter(([_, v]) => v !== undefined)
        )
      ),
    [props.args]
  );
  const $props = {
    ...args,
    ...variants
  };
  const $ctx = useDataEnv?.() || {};
  const refsRef = React.useRef({});
  const $refs = refsRef.current;
  return (
    <React.Fragment>
      <div
        data-plasmic-name={"root"}
        data-plasmic-override={overrides.root}
        data-plasmic-root={true}
        data-plasmic-for-node={forNode}
        className={classNames(
          projectcss.all,
          projectcss.root_reset,
          projectcss.plasmic_default_styles,
          projectcss.plasmic_mixins,
          projectcss.plasmic_tokens,
          plasmic_antd_5_hostless_css.plasmic_tokens,
          sty.root
        )}
      >
        <AppLayout
          data-plasmic-name={"appLayout"}
          data-plasmic-override={overrides.appLayout}
          className={classNames("__wab_instance", sty.appLayout)}
        >
          <div className={classNames(projectcss.all, sty.freeBox__wEzwJ)}>
            <div className={classNames(projectcss.all, sty.freeBox__qOCef)}>
              <SalesDashboardFilters
                data-plasmic-name={"salesDashboardFilters"}
                data-plasmic-override={overrides.salesDashboardFilters}
                buttonText={"Apply Filters"}
                className={classNames(
                  "__wab_instance",
                  sty.salesDashboardFilters
                )}
                neonDbConnectionString={
                  "postgresql://CRM_owner:EGWPp4rVMy0h@ep-long-mud-a1nhglxn-pooler.ap-southeast-1.aws.neon.tech/CRM?sslmode=require"
                }
              />

              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__zv2Ij
                )}
              >
                {"Incentive Primary= Primary Sales- 0.5* Sales Return-Breakage"}
              </div>
              <div
                className={classNames(
                  projectcss.all,
                  projectcss.__wab_text,
                  sty.text__yzjVg
                )}
              >
                {
                  "Primary Sales= Total Primary- Sales Return- Expiry-Rate Difference."
                }
              </div>
            </div>
            <SalesChart
              className={
                "" + " " + classNames("__wab_instance", sty.salesChart__bqq1)
              }
              neonDbConnectionString={
                "postgresql://CRM_owner:EGWPp4rVMy0h@ep-long-mud-a1nhglxn-pooler.ap-southeast-1.aws.neon.tech/CRM?sslmode=require"
              }
            />

            <SalesChart
              className={
                "" + " " + classNames("__wab_instance", sty.salesChart__prWpy)
              }
              neonDbConnectionString={
                "postgresql://CRM_owner:EGWPp4rVMy0h@ep-long-mud-a1nhglxn-pooler.ap-southeast-1.aws.neon.tech/CRM?sslmode=require"
              }
            />

            <ItemSalesTable
              data-plasmic-name={"itemSalesTable"}
              data-plasmic-override={overrides.itemSalesTable}
              className={
                "" + " " + classNames("__wab_instance", sty.itemSalesTable)
              }
            />

            <HQSalesTable
              data-plasmic-name={"hqSalesTable"}
              data-plasmic-override={overrides.hqSalesTable}
              className={
                "" + " " + classNames("__wab_instance", sty.hqSalesTable)
              }
            />

            <SalesTeamTable
              data-plasmic-name={"salesTeamTable"}
              data-plasmic-override={overrides.salesTeamTable}
              className={
                "" + " " + classNames("__wab_instance", sty.salesTeamTable)
              }
            />

            <CustomerSalesTable
              data-plasmic-name={"customerSalesTable"}
              data-plasmic-override={overrides.customerSalesTable}
              className={
                "" + " " + classNames("__wab_instance", sty.customerSalesTable)
              }
            />
          </div>
        </AppLayout>
      </div>
    </React.Fragment>
  );
}

const PlasmicDescendants = {
  root: [
    "root",
    "appLayout",
    "salesDashboardFilters",
    "itemSalesTable",
    "hqSalesTable",
    "salesTeamTable",
    "customerSalesTable"
  ],

  appLayout: [
    "appLayout",
    "salesDashboardFilters",
    "itemSalesTable",
    "hqSalesTable",
    "salesTeamTable",
    "customerSalesTable"
  ],

  salesDashboardFilters: ["salesDashboardFilters"],
  itemSalesTable: ["itemSalesTable"],
  hqSalesTable: ["hqSalesTable"],
  salesTeamTable: ["salesTeamTable"],
  customerSalesTable: ["customerSalesTable"]
};

function makeNodeComponent(nodeName) {
  const func = function (props) {
    const { variants, args, overrides } = React.useMemo(
      () =>
        deriveRenderOpts(props, {
          name: nodeName,
          descendantNames: PlasmicDescendants[nodeName],
          internalArgPropNames: PlasmicSalesDashboard__ArgProps,
          internalVariantPropNames: PlasmicSalesDashboard__VariantProps
        }),
      [props, nodeName]
    );
    return PlasmicSalesDashboard__RenderFunc({
      variants,
      args,
      overrides,
      forNode: nodeName
    });
  };
  if (nodeName === "root") {
    func.displayName = "PlasmicSalesDashboard";
  } else {
    func.displayName = `PlasmicSalesDashboard.${nodeName}`;
  }
  return func;
}

export const PlasmicSalesDashboard = Object.assign(
  // Top-level PlasmicSalesDashboard renders the root element
  makeNodeComponent("root"),
  {
    // Helper components rendering sub-elements
    appLayout: makeNodeComponent("appLayout"),
    salesDashboardFilters: makeNodeComponent("salesDashboardFilters"),
    itemSalesTable: makeNodeComponent("itemSalesTable"),
    hqSalesTable: makeNodeComponent("hqSalesTable"),
    salesTeamTable: makeNodeComponent("salesTeamTable"),
    customerSalesTable: makeNodeComponent("customerSalesTable"),
    // Metadata about props expected for PlasmicSalesDashboard
    internalVariantProps: PlasmicSalesDashboard__VariantProps,
    internalArgProps: PlasmicSalesDashboard__ArgProps,
    // Page metadata
    pageMetadata: {
      title: "",
      description: "",
      ogImageSrc: "",
      canonical: ""
    }
  }
);

export default PlasmicSalesDashboard;
/* prettier-ignore-end */
